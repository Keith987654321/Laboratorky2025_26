package main

/*
	Сортировка методом прочесывания - это улучшенная сортировка пузырьком. Последняя сравнивает
	только соседние эл-ты массива, а эта сравнивает эл-ты на промежутке. Благодаря этому наименьшие эл-ты
	быстрее "всплывают" в начало массива. Сортировка завершается, когда за весь очередной проход по массиву
	не было ни одной перестановки эл-тов и когда промежуток равен 1.
	Сложность в лучшем случае n*log(n)
	Худший случай n^2
	Затраты по памяти O(1)
*/

import "fmt"

func CombSort(arr []int) []int {
	isSorted := false
	shrinkFactor := 1.3 // Коэф-т сжатия промежутка
	gap := len(arr)     // Промежуток

	for !isSorted {
		gap = int(float64(gap) / shrinkFactor) // Сжимаем промежуток
		if gap <= 1 {
			gap = 1
			isSorted = true
		}

		i := 0
		for i+gap < len(arr) {
			if arr[i] > arr[i+gap] { // Если эл-т вначале массива больше эл-та в конце, то меняем их местами
				arr[i], arr[i+gap] = arr[i+gap], arr[i]
				isSorted = false
			}
			i++
		}
	}
	return arr
}

func main() {
	arr := []int{8, 4, 1, 56, 3, -44, 23, -6, 28, 0}
	fmt.Print(CombSort(arr))
}
