'''
	Сортировка поразрядная (Radix Sort).
	Сортирует числа, анализируя их разряды — начиная с младших (единицы),
	потом десятки, сотни и так далее. Для сортировки по каждому разряду
	используется стабильная сортировка подсчётом (Counting Sort).

	Таким образом, мы сначала сортируем числа по младшему разряду,
	затем — по следующему, и т. д., пока не пройдем все цифры
	наибольшего числа. Благодаря стабильности подсортировок итоговый
	результат полностью отсортирован.

--------------------------------------------------------------------------

	getMax(arr []int) int
	Находит и возвращает максимальный элемент массива.

--------------------------------------------------------------------------

	countingSort(arr []int, exp int, maxValue int)

	Это модифицированная версия сортировки подсчётом, которая сортирует
	массив `arr` не по самим числам, а по определённому разряду (единицы,
	десятки, сотни и т. д.), который задаётся параметром `exp`.

	Пример:
		exp = 1  → сортировка по единицам
		exp = 10 → сортировка по десяткам
		exp = 100 → по сотням

	Шаги:
	1. Считаем, сколько раз каждая цифра встречается в текущем разряде.
	2. Строим префиксную сумму (преф. сумма это сумма текущего эл-та и предыдущего) — это 
       позволит понять, где должна стоять каждая цифра в отсортированном массиве.
	3. Заполняем результирующий массив справа налево (для стабильности т.е. чтобы 
       одинаковые эл-ты не менялись зря местами друг с другом).
	4. Копируем результат обратно в исходный массив.

--------------------------------------------------------------------------

	radixSort(arr []int)

	Главная функция поразрядной сортировки.
	Находит максимальное число, чтобы определить, сколько разрядов нужно
	обработать. Затем последовательно вызывает countingSort для каждого
	разряда, начиная с 1 (единицы) и умножая на 10, пока не будут
	отсортированы все разряды.

'''

def get_max(arr):
    """
    Возвращает максимальный элемент массива.
    """
    max_value = arr[0]
    for x in arr:
        if x > max_value:
            max_value = x
    return max_value


def counting_sort(arr, exp):
    """
    Модифицированная сортировка подсчётом.
    Сортирует элементы массива arr по текущему разряду, заданному exp.

    exp = 1   → сортировка по единицам
    exp = 10  → по десяткам
    exp = 100 → по сотням
    """
    n = len(arr)
    result = [0] * n
    count = [0] * 10  # цифры от 0 до 9

    # Подсчёт количества цифр в текущем разряде
    for i in range(n):
        digit = (arr[i] // exp) % 10
        count[digit] += 1

    # Префиксная сумма — превращаем частоты в позиции
    for i in range(1, 10):
        count[i] += count[i - 1]

    # Построение отсортированного массива (справа налево — для стабильности)
    for i in range(n - 1, -1, -1):
        digit = (arr[i] // exp) % 10
        result[count[digit] - 1] = arr[i]
        count[digit] -= 1

    # Копируем результат обратно в arr
    for i in range(n):
        arr[i] = result[i]


def radix_sort(arr):
    """
    Поразрядная сортировка (Radix Sort).

    Сортирует целые числа, проходя по всем их разрядам
    от младших к старшим, используя стабильную сортировку подсчётом.
    """
    max_value = get_max(arr)
    exp = 1
    while max_value // exp > 0:
        counting_sort(arr, exp)
        exp *= 10


# Пример

arr = [170, 45, 75, 90, 802, 24, 2, 66]
radix_sort(arr) # Сортируем
print(arr) # Выводим




