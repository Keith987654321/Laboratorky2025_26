package main

import (
	"fmt"
)

/*
	Сортировка по разрядам. Сортируем числа по их разрядам, т.е.
	сначала по единицам, потом по десяткам, по сотням и тд.
*/

func getMax(arr []int) int { // Находит максимум в массиве
	n := len(arr)
	maxValue := arr[n-1]
	for i := 0; i < n; i++ {
		if arr[i] > maxValue {
			maxValue = arr[i]
		}
	}

	return maxValue
}

/*
Данная модифицированная "сортировка подсчётом" используется внутри сортировки по разрядам.
Суть сортировки подсчётом в том, что мы находим максимальный эл-т X в массиве и создаём
дополнительный массив с заполненный нулями размером X + 1. После этого мы считаем сколько
каждое число вошло в массив и записываем это в наш дополнительный массив. Потом находим
"префиксную сумму" нашего доп.массива (это когда мы текущий эл-т складываем с предыдущим).
И магическим образом получаем внутри этого массива индексы где должны стоять эл-ты оригинального
массива. Остаётся только расставить эл-ты по своим местам и готово.
*/
func countingSort(arr []int, exp int, maxValue int) {
	/*
		Данная модифицированная сортировка подсчетом сортирует массив
		arr не по самим числам и по разряду, который указан в параметре
		exp. Например exp = 1 это по единицам, exp = 10 по десяткам и тд.
	*/
	n := len(arr)

	cntArr := make([]int, maxValue+1) // Создаём массив, где будем считать сколько раз тот или иной эл-т попадался в оригинальном массиве
	for i := 0; i < n; i++ {
		cntArr[(arr[i]/exp)%10]++ // Берем число под индексом i из ориг.массива берем только опр. разряд (arr[i] / 10) % 10 и делаем +1 к числу его вхождений в ориг.массив
	}

	for i := 1; i < maxValue+1; i++ { // Префиксная сумма
		cntArr[i] += cntArr[i-1]
	}

	result := make([]int, n) // Массив где будут отсортированные числа по разряду
	for i := n - 1; i >= 0; i-- {
		result[cntArr[(arr[i]/exp)%10]-1] = arr[i]
		cntArr[(arr[i]/exp)%10]--
	}

	for i := 0; i < n; i++ {
		arr[i] = result[i]
	}
}

func radixSort(arr []int) {
	maximum := getMax(arr)

	for exp := 1; maximum/exp > 0; exp *= 10 {
		countingSort(arr, exp, 9)
	}
}

func main() {
	arr := []int{170, 45, 75, 90, 802, 24, 2, 66}
	radixSort(arr)
	fmt.Print(arr)
}
